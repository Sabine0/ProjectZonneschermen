
ArduinoTemp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000a20  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000053  00800106  00800106  00000aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001361  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096a  00000000  00000000  00001fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac3  00000000  00000000  0000293b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003400  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  0000363c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000457  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 35       	cpi	r26, 0x59	; 89
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 02 	call	0x578	; 0x578 <main>
  9e:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <SCH_tasks_G>
  b4:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e3 e1       	ldi	r30, 0x13	; 19
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ed 5e       	subi	r30, 0xED	; 237
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ed 5e       	subi	r30, 0xED	; 237
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c3 e1       	ldi	r28, 0x13	; 19
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	1a 30       	cpi	r17, 0x0A	; 10
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	ca 30       	cpi	r28, 0x0A	; 10
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e3 e1       	ldi	r30, 0x13	; 19
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	29 e5       	ldi	r18, 0x59	; 89
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <setup>:
		if(data == 0xc0){
			transmit(temperatuur);
			transmit(max_temp);
		}
	}
}
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8a b9       	out	0x0a, r24	; 10
 21c:	84 b9       	out	0x04, r24	; 4
 21e:	08 95       	ret

00000220 <uart_init>:
 220:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 224:	83 e3       	ldi	r24, 0x33	; 51
 226:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 22a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 23a:	08 95       	ret

0000023c <adc_init>:
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	87 60       	ori	r24, 0x07	; 7
 244:	80 83       	st	Z, r24
 246:	ac e7       	ldi	r26, 0x7C	; 124
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	8c 91       	ld	r24, X
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	8c 93       	st	X, r24
 250:	80 81       	ld	r24, Z
 252:	80 68       	ori	r24, 0x80	; 128
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <readAdc>:
 258:	ec e7       	ldi	r30, 0x7C	; 124
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <readAdc+0x18>
 276:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <tempsensor>:
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 2c 01 	call	0x258	; 0x258 <readAdc>
 286:	ef e3       	ldi	r30, 0x3F	; 63
 288:	fc e9       	ldi	r31, 0x9C	; 156
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <tempsensor+0xc>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <tempsensor+0x12>
 290:	00 00       	nop
 292:	bc 01       	movw	r22, r24
 294:	99 0f       	add	r25, r25
 296:	88 0b       	sbc	r24, r24
 298:	99 0b       	sbc	r25, r25
 29a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatsisf>
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	53 e4       	ldi	r21, 0x43	; 67
 2a6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__divsf3>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 ea       	ldi	r20, 0xA0	; 160
 2b0:	50 e4       	ldi	r21, 0x40	; 64
 2b2:	0e 94 8b 04 	call	0x916	; 0x916 <__mulsf3>
 2b6:	60 93 0b 01 	sts	0x010B, r22	; 0x80010b <volt>
 2ba:	70 93 0c 01 	sts	0x010C, r23	; 0x80010c <volt+0x1>
 2be:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <volt+0x2>
 2c2:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <volt+0x3>
 2c6:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <volt>
 2ca:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <volt+0x1>
 2ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <volt+0x2>
 2d2:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <volt+0x3>
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	40 e0       	ldi	r20, 0x00	; 0
 2dc:	5f e3       	ldi	r21, 0x3F	; 63
 2de:	0e 94 ef 02 	call	0x5de	; 0x5de <__subsf3>
 2e2:	20 e0       	ldi	r18, 0x00	; 0
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	48 ec       	ldi	r20, 0xC8	; 200
 2e8:	52 e4       	ldi	r21, 0x42	; 66
 2ea:	0e 94 8b 04 	call	0x916	; 0x916 <__mulsf3>
 2ee:	60 93 07 01 	sts	0x0107, r22	; 0x800107 <temp>
 2f2:	70 93 08 01 	sts	0x0108, r23	; 0x800108 <temp+0x1>
 2f6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <temp+0x2>
 2fa:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <temp+0x3>
 2fe:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <temp>
 302:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <temp+0x1>
 306:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <temp+0x2>
 30a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <temp+0x3>
 30e:	0e 94 ce 03 	call	0x79c	; 0x79c <__fixunssfsi>
 312:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 316:	08 95       	ret

00000318 <set_eeprom_address>:
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 322:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <status>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 32e:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <min_uitrol>
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 33a:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <max_uitrol>
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 346:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <uitrol>
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 352:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <max_licht>
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 35e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 36a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <licht>
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 376:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <count>
 37a:	89 e0       	ldi	r24, 0x09	; 9
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 382:	08 95       	ret

00000384 <get_eeprom>:
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <status>
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 398:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <min_uitrol>
 39c:	83 e0       	ldi	r24, 0x03	; 3
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <max_uitrol>
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3b0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uitrol>
 3b4:	85 e0       	ldi	r24, 0x05	; 5
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3bc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <max_licht>
 3c0:	86 e0       	ldi	r24, 0x06	; 6
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3d4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <licht>
 3d8:	89 e0       	ldi	r24, 0x09	; 9
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 3e0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <count>
 3e4:	08 95       	ret

000003e6 <RoodLEDaan>:
 3e6:	5b 9a       	sbi	0x0b, 3	; 11
 3e8:	08 95       	ret

000003ea <RoodLEDuit>:
 3ea:	5b 98       	cbi	0x0b, 3	; 11
 3ec:	08 95       	ret

000003ee <GroenLEDaan>:
 3ee:	5a 9a       	sbi	0x0b, 2	; 11
 3f0:	08 95       	ret

000003f2 <GroenLEDuit>:
 3f2:	5a 98       	cbi	0x0b, 2	; 11
 3f4:	08 95       	ret

000003f6 <GeelLEDaan>:
 3f6:	5c 9a       	sbi	0x0b, 4	; 11
 3f8:	08 95       	ret

000003fa <GeelLEDuit>:
 3fa:	5c 98       	cbi	0x0b, 4	; 11
 3fc:	08 95       	ret

000003fe <schermoprollen>:
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rollen>
 404:	8b b1       	in	r24, 0x0b	; 11
 406:	84 30       	cpi	r24, 0x04	; 4
 408:	11 f4       	brne	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <GroenLEDuit>
 40e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <RoodLEDaan>
 412:	3c c0       	rjmp	.+120    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 414:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GeelLEDaan>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	89 e6       	ldi	r24, 0x69	; 105
 41c:	98 e1       	ldi	r25, 0x18	; 24
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <GeelLEDuit>
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	89 e6       	ldi	r24, 0x69	; 105
 432:	98 e1       	ldi	r25, 0x18	; 24
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 444:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <min_uitrol>
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0a 97       	sbiw	r24, 0x0a	; 10
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	82 17       	cp	r24, r18
 450:	93 07       	cpc	r25, r19
 452:	8c f4       	brge	.+34     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 454:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <uitrol>
 458:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <min_uitrol>
 45c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 460:	92 1b       	sub	r25, r18
 462:	89 1b       	sub	r24, r25
 464:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uitrol>
 468:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <uitrol>
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 474:	0b c0       	rjmp	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 476:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 47a:	8a 50       	subi	r24, 0x0A	; 10
 47c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uitrol>
 480:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <uitrol>
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 48c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <uitrol>
 490:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <min_uitrol>
 494:	89 17       	cp	r24, r25
 496:	08 f4       	brcc	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	bd cf       	rjmp	.-134    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 49a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rollen>
 49e:	08 95       	ret

000004a0 <schermuitrollen>:
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rollen>
 4a6:	8b b1       	in	r24, 0x0b	; 11
 4a8:	88 30       	cpi	r24, 0x08	; 8
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <schermuitrollen+0x10>
 4ac:	0e 94 f5 01 	call	0x3ea	; 0x3ea <RoodLEDuit>
 4b0:	0e 94 f7 01 	call	0x3ee	; 0x3ee <GroenLEDaan>
 4b4:	3c c0       	rjmp	.+120    	; 0x52e <schermuitrollen+0x8e>
 4b6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <GeelLEDaan>
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	89 e6       	ldi	r24, 0x69	; 105
 4be:	98 e1       	ldi	r25, 0x18	; 24
 4c0:	21 50       	subi	r18, 0x01	; 1
 4c2:	80 40       	sbci	r24, 0x00	; 0
 4c4:	90 40       	sbci	r25, 0x00	; 0
 4c6:	e1 f7       	brne	.-8      	; 0x4c0 <schermuitrollen+0x20>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <schermuitrollen+0x2a>
 4ca:	00 00       	nop
 4cc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <GeelLEDuit>
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	89 e6       	ldi	r24, 0x69	; 105
 4d4:	98 e1       	ldi	r25, 0x18	; 24
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <schermuitrollen+0x36>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <schermuitrollen+0x40>
 4e0:	00 00       	nop
 4e2:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 4e6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <max_uitrol>
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0a 96       	adiw	r24, 0x0a	; 10
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	28 17       	cp	r18, r24
 4f2:	39 07       	cpc	r19, r25
 4f4:	8c f4       	brge	.+34     	; 0x518 <schermuitrollen+0x78>
 4f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <max_uitrol>
 4fa:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <uitrol>
 4fe:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 502:	82 0f       	add	r24, r18
 504:	89 1b       	sub	r24, r25
 506:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uitrol>
 50a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <uitrol>
 50e:	84 e0       	ldi	r24, 0x04	; 4
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 516:	0b c0       	rjmp	.+22     	; 0x52e <schermuitrollen+0x8e>
 518:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <uitrol>
 51c:	86 5f       	subi	r24, 0xF6	; 246
 51e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <uitrol>
 522:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <uitrol>
 526:	84 e0       	ldi	r24, 0x04	; 4
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 00 05 	call	0xa00	; 0xa00 <eeprom_write_byte>
 52e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <uitrol>
 532:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <max_uitrol>
 536:	98 17       	cp	r25, r24
 538:	08 f4       	brcc	.+2      	; 0x53c <schermuitrollen+0x9c>
 53a:	bd cf       	rjmp	.-134    	; 0x4b6 <schermuitrollen+0x16>
 53c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rollen>
 540:	08 95       	ret

00000542 <rol>:
 542:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <status>
 546:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <rollen>
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	91 30       	cpi	r25, 0x01	; 1
 54e:	09 f0       	breq	.+2      	; 0x552 <rol+0x10>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	88 23       	and	r24, r24
 554:	81 f0       	breq	.+32     	; 0x576 <rol+0x34>
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	21 11       	cpse	r18, r1
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	88 23       	and	r24, r24
 55e:	59 f0       	breq	.+22     	; 0x576 <rol+0x34>
 560:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 564:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 568:	89 17       	cp	r24, r25
 56a:	18 f4       	brcc	.+6      	; 0x572 <rol+0x30>
 56c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <schermuitrollen>
 570:	08 95       	ret
 572:	0e 94 ff 01 	call	0x3fe	; 0x3fe <schermoprollen>
 576:	08 95       	ret

00000578 <main>:

int main(void){

	if(eeprom_read_byte(0x00) != 0x01){
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <eeprom_read_byte>
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	19 f0       	breq	.+6      	; 0x58a <main+0x12>
		set_eeprom_address();
 584:	0e 94 8c 01 	call	0x318	; 0x318 <set_eeprom_address>
 588:	02 c0       	rjmp	.+4      	; 0x58e <main+0x16>
	}
	else{
		get_eeprom();
 58a:	0e 94 c2 01 	call	0x384	; 0x384 <get_eeprom>
	}
	
	// Set up de ports
	setup();
 58e:	0e 94 0c 01 	call	0x218	; 0x218 <setup>
	
	// Initialise communicatie
	uart_init();
 592:	0e 94 10 01 	call	0x220	; 0x220 <uart_init>
	adc_init();
 596:	0e 94 1e 01 	call	0x23c	; 0x23c <adc_init>
	
	//RoodLEDuit();
	//GroenLEDuit();
	//GeelLEDuit();
	
	rollen=0;
 59a:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rollen>
	status=1;
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <status>
	max_temp = 25;
 5a4:	89 e1       	ldi	r24, 0x19	; 25
 5a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	temperatuur = 30;
 5aa:	8e e1       	ldi	r24, 0x1E	; 30
 5ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	
	SCH_Init_T1(); // Initialise de timer, default 10ms
 5b0:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	
	// Voeg tasks toe aan de scheduler
	//SCH_Add_Task(run, 0, 1);
	SCH_Add_Task(tempsensor,1000, 1000); 
 5b4:	48 ee       	ldi	r20, 0xE8	; 232
 5b6:	53 e0       	ldi	r21, 0x03	; 3
 5b8:	68 ee       	ldi	r22, 0xE8	; 232
 5ba:	73 e0       	ldi	r23, 0x03	; 3
 5bc:	8f e3       	ldi	r24, 0x3F	; 63
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(getDistance,1200,1000); // Ultrasoon sensor niet geimplementeerd
	SCH_Add_Task(rol,500,3000); //4000
 5c4:	48 eb       	ldi	r20, 0xB8	; 184
 5c6:	5b e0       	ldi	r21, 0x0B	; 11
 5c8:	64 ef       	ldi	r22, 0xF4	; 244
 5ca:	71 e0       	ldi	r23, 0x01	; 1
 5cc:	81 ea       	ldi	r24, 0xA1	; 161
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start(); // De scheduler starten
 5d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	
	while(1){
		SCH_Dispatch_Tasks();
 5d8:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 5dc:	fd cf       	rjmp	.-6      	; 0x5d8 <main+0x60>

000005de <__subsf3>:
 5de:	50 58       	subi	r21, 0x80	; 128

000005e0 <__addsf3>:
 5e0:	bb 27       	eor	r27, r27
 5e2:	aa 27       	eor	r26, r26
 5e4:	0e 94 07 03 	call	0x60e	; 0x60e <__addsf3x>
 5e8:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 5ec:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 5f0:	38 f0       	brcs	.+14     	; 0x600 <__addsf3+0x20>
 5f2:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <__addsf3+0x20>
 5f8:	39 f4       	brne	.+14     	; 0x608 <__addsf3+0x28>
 5fa:	9f 3f       	cpi	r25, 0xFF	; 255
 5fc:	19 f4       	brne	.+6      	; 0x604 <__addsf3+0x24>
 5fe:	26 f4       	brtc	.+8      	; 0x608 <__addsf3+0x28>
 600:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>
 604:	0e f4       	brtc	.+2      	; 0x608 <__addsf3+0x28>
 606:	e0 95       	com	r30
 608:	e7 fb       	bst	r30, 7
 60a:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>

0000060e <__addsf3x>:
 60e:	e9 2f       	mov	r30, r25
 610:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 614:	58 f3       	brcs	.-42     	; 0x5ec <__addsf3+0xc>
 616:	ba 17       	cp	r27, r26
 618:	62 07       	cpc	r22, r18
 61a:	73 07       	cpc	r23, r19
 61c:	84 07       	cpc	r24, r20
 61e:	95 07       	cpc	r25, r21
 620:	20 f0       	brcs	.+8      	; 0x62a <__addsf3x+0x1c>
 622:	79 f4       	brne	.+30     	; 0x642 <__addsf3x+0x34>
 624:	a6 f5       	brtc	.+104    	; 0x68e <__addsf3x+0x80>
 626:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_zero>
 62a:	0e f4       	brtc	.+2      	; 0x62e <__addsf3x+0x20>
 62c:	e0 95       	com	r30
 62e:	0b 2e       	mov	r0, r27
 630:	ba 2f       	mov	r27, r26
 632:	a0 2d       	mov	r26, r0
 634:	0b 01       	movw	r0, r22
 636:	b9 01       	movw	r22, r18
 638:	90 01       	movw	r18, r0
 63a:	0c 01       	movw	r0, r24
 63c:	ca 01       	movw	r24, r20
 63e:	a0 01       	movw	r20, r0
 640:	11 24       	eor	r1, r1
 642:	ff 27       	eor	r31, r31
 644:	59 1b       	sub	r21, r25
 646:	99 f0       	breq	.+38     	; 0x66e <__addsf3x+0x60>
 648:	59 3f       	cpi	r21, 0xF9	; 249
 64a:	50 f4       	brcc	.+20     	; 0x660 <__addsf3x+0x52>
 64c:	50 3e       	cpi	r21, 0xE0	; 224
 64e:	68 f1       	brcs	.+90     	; 0x6aa <__addsf3x+0x9c>
 650:	1a 16       	cp	r1, r26
 652:	f0 40       	sbci	r31, 0x00	; 0
 654:	a2 2f       	mov	r26, r18
 656:	23 2f       	mov	r18, r19
 658:	34 2f       	mov	r19, r20
 65a:	44 27       	eor	r20, r20
 65c:	58 5f       	subi	r21, 0xF8	; 248
 65e:	f3 cf       	rjmp	.-26     	; 0x646 <__addsf3x+0x38>
 660:	46 95       	lsr	r20
 662:	37 95       	ror	r19
 664:	27 95       	ror	r18
 666:	a7 95       	ror	r26
 668:	f0 40       	sbci	r31, 0x00	; 0
 66a:	53 95       	inc	r21
 66c:	c9 f7       	brne	.-14     	; 0x660 <__addsf3x+0x52>
 66e:	7e f4       	brtc	.+30     	; 0x68e <__addsf3x+0x80>
 670:	1f 16       	cp	r1, r31
 672:	ba 0b       	sbc	r27, r26
 674:	62 0b       	sbc	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba f0       	brmi	.+46     	; 0x6aa <__addsf3x+0x9c>
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	a1 f0       	breq	.+40     	; 0x6a8 <__addsf3x+0x9a>
 680:	ff 0f       	add	r31, r31
 682:	bb 1f       	adc	r27, r27
 684:	66 1f       	adc	r22, r22
 686:	77 1f       	adc	r23, r23
 688:	88 1f       	adc	r24, r24
 68a:	c2 f7       	brpl	.-16     	; 0x67c <__addsf3x+0x6e>
 68c:	0e c0       	rjmp	.+28     	; 0x6aa <__addsf3x+0x9c>
 68e:	ba 0f       	add	r27, r26
 690:	62 1f       	adc	r22, r18
 692:	73 1f       	adc	r23, r19
 694:	84 1f       	adc	r24, r20
 696:	48 f4       	brcc	.+18     	; 0x6aa <__addsf3x+0x9c>
 698:	87 95       	ror	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b7 95       	ror	r27
 6a0:	f7 95       	ror	r31
 6a2:	9e 3f       	cpi	r25, 0xFE	; 254
 6a4:	08 f0       	brcs	.+2      	; 0x6a8 <__addsf3x+0x9a>
 6a6:	b0 cf       	rjmp	.-160    	; 0x608 <__addsf3+0x28>
 6a8:	93 95       	inc	r25
 6aa:	88 0f       	add	r24, r24
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <__addsf3x+0xa2>
 6ae:	99 27       	eor	r25, r25
 6b0:	ee 0f       	add	r30, r30
 6b2:	97 95       	ror	r25
 6b4:	87 95       	ror	r24
 6b6:	08 95       	ret

000006b8 <__divsf3>:
 6b8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divsf3x>
 6bc:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 6c0:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 6c4:	58 f0       	brcs	.+22     	; 0x6dc <__divsf3+0x24>
 6c6:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 6ca:	40 f0       	brcs	.+16     	; 0x6dc <__divsf3+0x24>
 6cc:	29 f4       	brne	.+10     	; 0x6d8 <__divsf3+0x20>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	29 f0       	breq	.+10     	; 0x6dc <__divsf3+0x24>
 6d2:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 6d6:	51 11       	cpse	r21, r1
 6d8:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 6dc:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>

000006e0 <__divsf3x>:
 6e0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 6e4:	68 f3       	brcs	.-38     	; 0x6c0 <__divsf3+0x8>

000006e6 <__divsf3_pse>:
 6e6:	99 23       	and	r25, r25
 6e8:	b1 f3       	breq	.-20     	; 0x6d6 <__divsf3+0x1e>
 6ea:	55 23       	and	r21, r21
 6ec:	91 f3       	breq	.-28     	; 0x6d2 <__divsf3+0x1a>
 6ee:	95 1b       	sub	r25, r21
 6f0:	55 0b       	sbc	r21, r21
 6f2:	bb 27       	eor	r27, r27
 6f4:	aa 27       	eor	r26, r26
 6f6:	62 17       	cp	r22, r18
 6f8:	73 07       	cpc	r23, r19
 6fa:	84 07       	cpc	r24, r20
 6fc:	38 f0       	brcs	.+14     	; 0x70c <__divsf3_pse+0x26>
 6fe:	9f 5f       	subi	r25, 0xFF	; 255
 700:	5f 4f       	sbci	r21, 0xFF	; 255
 702:	22 0f       	add	r18, r18
 704:	33 1f       	adc	r19, r19
 706:	44 1f       	adc	r20, r20
 708:	aa 1f       	adc	r26, r26
 70a:	a9 f3       	breq	.-22     	; 0x6f6 <__divsf3_pse+0x10>
 70c:	35 d0       	rcall	.+106    	; 0x778 <__divsf3_pse+0x92>
 70e:	0e 2e       	mov	r0, r30
 710:	3a f0       	brmi	.+14     	; 0x720 <__divsf3_pse+0x3a>
 712:	e0 e8       	ldi	r30, 0x80	; 128
 714:	32 d0       	rcall	.+100    	; 0x77a <__divsf3_pse+0x94>
 716:	91 50       	subi	r25, 0x01	; 1
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	e6 95       	lsr	r30
 71c:	00 1c       	adc	r0, r0
 71e:	ca f7       	brpl	.-14     	; 0x712 <__divsf3_pse+0x2c>
 720:	2b d0       	rcall	.+86     	; 0x778 <__divsf3_pse+0x92>
 722:	fe 2f       	mov	r31, r30
 724:	29 d0       	rcall	.+82     	; 0x778 <__divsf3_pse+0x92>
 726:	66 0f       	add	r22, r22
 728:	77 1f       	adc	r23, r23
 72a:	88 1f       	adc	r24, r24
 72c:	bb 1f       	adc	r27, r27
 72e:	26 17       	cp	r18, r22
 730:	37 07       	cpc	r19, r23
 732:	48 07       	cpc	r20, r24
 734:	ab 07       	cpc	r26, r27
 736:	b0 e8       	ldi	r27, 0x80	; 128
 738:	09 f0       	breq	.+2      	; 0x73c <__divsf3_pse+0x56>
 73a:	bb 0b       	sbc	r27, r27
 73c:	80 2d       	mov	r24, r0
 73e:	bf 01       	movw	r22, r30
 740:	ff 27       	eor	r31, r31
 742:	93 58       	subi	r25, 0x83	; 131
 744:	5f 4f       	sbci	r21, 0xFF	; 255
 746:	3a f0       	brmi	.+14     	; 0x756 <__divsf3_pse+0x70>
 748:	9e 3f       	cpi	r25, 0xFE	; 254
 74a:	51 05       	cpc	r21, r1
 74c:	78 f0       	brcs	.+30     	; 0x76c <__divsf3_pse+0x86>
 74e:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 752:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 756:	5f 3f       	cpi	r21, 0xFF	; 255
 758:	e4 f3       	brlt	.-8      	; 0x752 <__divsf3_pse+0x6c>
 75a:	98 3e       	cpi	r25, 0xE8	; 232
 75c:	d4 f3       	brlt	.-12     	; 0x752 <__divsf3_pse+0x6c>
 75e:	86 95       	lsr	r24
 760:	77 95       	ror	r23
 762:	67 95       	ror	r22
 764:	b7 95       	ror	r27
 766:	f7 95       	ror	r31
 768:	9f 5f       	subi	r25, 0xFF	; 255
 76a:	c9 f7       	brne	.-14     	; 0x75e <__divsf3_pse+0x78>
 76c:	88 0f       	add	r24, r24
 76e:	91 1d       	adc	r25, r1
 770:	96 95       	lsr	r25
 772:	87 95       	ror	r24
 774:	97 f9       	bld	r25, 7
 776:	08 95       	ret
 778:	e1 e0       	ldi	r30, 0x01	; 1
 77a:	66 0f       	add	r22, r22
 77c:	77 1f       	adc	r23, r23
 77e:	88 1f       	adc	r24, r24
 780:	bb 1f       	adc	r27, r27
 782:	62 17       	cp	r22, r18
 784:	73 07       	cpc	r23, r19
 786:	84 07       	cpc	r24, r20
 788:	ba 07       	cpc	r27, r26
 78a:	20 f0       	brcs	.+8      	; 0x794 <__divsf3_pse+0xae>
 78c:	62 1b       	sub	r22, r18
 78e:	73 0b       	sbc	r23, r19
 790:	84 0b       	sbc	r24, r20
 792:	ba 0b       	sbc	r27, r26
 794:	ee 1f       	adc	r30, r30
 796:	88 f7       	brcc	.-30     	; 0x77a <__divsf3_pse+0x94>
 798:	e0 95       	com	r30
 79a:	08 95       	ret

0000079c <__fixunssfsi>:
 79c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_splitA>
 7a0:	88 f0       	brcs	.+34     	; 0x7c4 <__fixunssfsi+0x28>
 7a2:	9f 57       	subi	r25, 0x7F	; 127
 7a4:	98 f0       	brcs	.+38     	; 0x7cc <__fixunssfsi+0x30>
 7a6:	b9 2f       	mov	r27, r25
 7a8:	99 27       	eor	r25, r25
 7aa:	b7 51       	subi	r27, 0x17	; 23
 7ac:	b0 f0       	brcs	.+44     	; 0x7da <__fixunssfsi+0x3e>
 7ae:	e1 f0       	breq	.+56     	; 0x7e8 <__fixunssfsi+0x4c>
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	1a f0       	brmi	.+6      	; 0x7c0 <__fixunssfsi+0x24>
 7ba:	ba 95       	dec	r27
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__fixunssfsi+0x14>
 7be:	14 c0       	rjmp	.+40     	; 0x7e8 <__fixunssfsi+0x4c>
 7c0:	b1 30       	cpi	r27, 0x01	; 1
 7c2:	91 f0       	breq	.+36     	; 0x7e8 <__fixunssfsi+0x4c>
 7c4:	0e 94 84 04 	call	0x908	; 0x908 <__fp_zero>
 7c8:	b1 e0       	ldi	r27, 0x01	; 1
 7ca:	08 95       	ret
 7cc:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_zero>
 7d0:	67 2f       	mov	r22, r23
 7d2:	78 2f       	mov	r23, r24
 7d4:	88 27       	eor	r24, r24
 7d6:	b8 5f       	subi	r27, 0xF8	; 248
 7d8:	39 f0       	breq	.+14     	; 0x7e8 <__fixunssfsi+0x4c>
 7da:	b9 3f       	cpi	r27, 0xF9	; 249
 7dc:	cc f3       	brlt	.-14     	; 0x7d0 <__fixunssfsi+0x34>
 7de:	86 95       	lsr	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	b3 95       	inc	r27
 7e6:	d9 f7       	brne	.-10     	; 0x7de <__fixunssfsi+0x42>
 7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__fixunssfsi+0x5c>
 7ea:	90 95       	com	r25
 7ec:	80 95       	com	r24
 7ee:	70 95       	com	r23
 7f0:	61 95       	neg	r22
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__floatunsisf>:
 7fa:	e8 94       	clt
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <__floatsisf+0x12>

000007fe <__floatsisf>:
 7fe:	97 fb       	bst	r25, 7
 800:	3e f4       	brtc	.+14     	; 0x810 <__floatsisf+0x12>
 802:	90 95       	com	r25
 804:	80 95       	com	r24
 806:	70 95       	com	r23
 808:	61 95       	neg	r22
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	99 23       	and	r25, r25
 812:	a9 f0       	breq	.+42     	; 0x83e <__floatsisf+0x40>
 814:	f9 2f       	mov	r31, r25
 816:	96 e9       	ldi	r25, 0x96	; 150
 818:	bb 27       	eor	r27, r27
 81a:	93 95       	inc	r25
 81c:	f6 95       	lsr	r31
 81e:	87 95       	ror	r24
 820:	77 95       	ror	r23
 822:	67 95       	ror	r22
 824:	b7 95       	ror	r27
 826:	f1 11       	cpse	r31, r1
 828:	f8 cf       	rjmp	.-16     	; 0x81a <__floatsisf+0x1c>
 82a:	fa f4       	brpl	.+62     	; 0x86a <__floatsisf+0x6c>
 82c:	bb 0f       	add	r27, r27
 82e:	11 f4       	brne	.+4      	; 0x834 <__floatsisf+0x36>
 830:	60 ff       	sbrs	r22, 0
 832:	1b c0       	rjmp	.+54     	; 0x86a <__floatsisf+0x6c>
 834:	6f 5f       	subi	r22, 0xFF	; 255
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	16 c0       	rjmp	.+44     	; 0x86a <__floatsisf+0x6c>
 83e:	88 23       	and	r24, r24
 840:	11 f0       	breq	.+4      	; 0x846 <__floatsisf+0x48>
 842:	96 e9       	ldi	r25, 0x96	; 150
 844:	11 c0       	rjmp	.+34     	; 0x868 <__floatsisf+0x6a>
 846:	77 23       	and	r23, r23
 848:	21 f0       	breq	.+8      	; 0x852 <__floatsisf+0x54>
 84a:	9e e8       	ldi	r25, 0x8E	; 142
 84c:	87 2f       	mov	r24, r23
 84e:	76 2f       	mov	r23, r22
 850:	05 c0       	rjmp	.+10     	; 0x85c <__floatsisf+0x5e>
 852:	66 23       	and	r22, r22
 854:	71 f0       	breq	.+28     	; 0x872 <__floatsisf+0x74>
 856:	96 e8       	ldi	r25, 0x86	; 134
 858:	86 2f       	mov	r24, r22
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	60 e0       	ldi	r22, 0x00	; 0
 85e:	2a f0       	brmi	.+10     	; 0x86a <__floatsisf+0x6c>
 860:	9a 95       	dec	r25
 862:	66 0f       	add	r22, r22
 864:	77 1f       	adc	r23, r23
 866:	88 1f       	adc	r24, r24
 868:	da f7       	brpl	.-10     	; 0x860 <__floatsisf+0x62>
 86a:	88 0f       	add	r24, r24
 86c:	96 95       	lsr	r25
 86e:	87 95       	ror	r24
 870:	97 f9       	bld	r25, 7
 872:	08 95       	ret

00000874 <__fp_inf>:
 874:	97 f9       	bld	r25, 7
 876:	9f 67       	ori	r25, 0x7F	; 127
 878:	80 e8       	ldi	r24, 0x80	; 128
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	08 95       	ret

00000880 <__fp_nan>:
 880:	9f ef       	ldi	r25, 0xFF	; 255
 882:	80 ec       	ldi	r24, 0xC0	; 192
 884:	08 95       	ret

00000886 <__fp_pscA>:
 886:	00 24       	eor	r0, r0
 888:	0a 94       	dec	r0
 88a:	16 16       	cp	r1, r22
 88c:	17 06       	cpc	r1, r23
 88e:	18 06       	cpc	r1, r24
 890:	09 06       	cpc	r0, r25
 892:	08 95       	ret

00000894 <__fp_pscB>:
 894:	00 24       	eor	r0, r0
 896:	0a 94       	dec	r0
 898:	12 16       	cp	r1, r18
 89a:	13 06       	cpc	r1, r19
 89c:	14 06       	cpc	r1, r20
 89e:	05 06       	cpc	r0, r21
 8a0:	08 95       	ret

000008a2 <__fp_round>:
 8a2:	09 2e       	mov	r0, r25
 8a4:	03 94       	inc	r0
 8a6:	00 0c       	add	r0, r0
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0xc>
 8aa:	88 23       	and	r24, r24
 8ac:	52 f0       	brmi	.+20     	; 0x8c2 <__fp_round+0x20>
 8ae:	bb 0f       	add	r27, r27
 8b0:	40 f4       	brcc	.+16     	; 0x8c2 <__fp_round+0x20>
 8b2:	bf 2b       	or	r27, r31
 8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0x18>
 8b6:	60 ff       	sbrs	r22, 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__fp_round+0x20>
 8ba:	6f 5f       	subi	r22, 0xFF	; 255
 8bc:	7f 4f       	sbci	r23, 0xFF	; 255
 8be:	8f 4f       	sbci	r24, 0xFF	; 255
 8c0:	9f 4f       	sbci	r25, 0xFF	; 255
 8c2:	08 95       	ret

000008c4 <__fp_split3>:
 8c4:	57 fd       	sbrc	r21, 7
 8c6:	90 58       	subi	r25, 0x80	; 128
 8c8:	44 0f       	add	r20, r20
 8ca:	55 1f       	adc	r21, r21
 8cc:	59 f0       	breq	.+22     	; 0x8e4 <__fp_splitA+0x10>
 8ce:	5f 3f       	cpi	r21, 0xFF	; 255
 8d0:	71 f0       	breq	.+28     	; 0x8ee <__fp_splitA+0x1a>
 8d2:	47 95       	ror	r20

000008d4 <__fp_splitA>:
 8d4:	88 0f       	add	r24, r24
 8d6:	97 fb       	bst	r25, 7
 8d8:	99 1f       	adc	r25, r25
 8da:	61 f0       	breq	.+24     	; 0x8f4 <__fp_splitA+0x20>
 8dc:	9f 3f       	cpi	r25, 0xFF	; 255
 8de:	79 f0       	breq	.+30     	; 0x8fe <__fp_splitA+0x2a>
 8e0:	87 95       	ror	r24
 8e2:	08 95       	ret
 8e4:	12 16       	cp	r1, r18
 8e6:	13 06       	cpc	r1, r19
 8e8:	14 06       	cpc	r1, r20
 8ea:	55 1f       	adc	r21, r21
 8ec:	f2 cf       	rjmp	.-28     	; 0x8d2 <__fp_split3+0xe>
 8ee:	46 95       	lsr	r20
 8f0:	f1 df       	rcall	.-30     	; 0x8d4 <__fp_splitA>
 8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
 8f4:	16 16       	cp	r1, r22
 8f6:	17 06       	cpc	r1, r23
 8f8:	18 06       	cpc	r1, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	f1 cf       	rjmp	.-30     	; 0x8e0 <__fp_splitA+0xc>
 8fe:	86 95       	lsr	r24
 900:	71 05       	cpc	r23, r1
 902:	61 05       	cpc	r22, r1
 904:	08 94       	sec
 906:	08 95       	ret

00000908 <__fp_zero>:
 908:	e8 94       	clt

0000090a <__fp_szero>:
 90a:	bb 27       	eor	r27, r27
 90c:	66 27       	eor	r22, r22
 90e:	77 27       	eor	r23, r23
 910:	cb 01       	movw	r24, r22
 912:	97 f9       	bld	r25, 7
 914:	08 95       	ret

00000916 <__mulsf3>:
 916:	0e 94 9e 04 	call	0x93c	; 0x93c <__mulsf3x>
 91a:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
 91e:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
 922:	38 f0       	brcs	.+14     	; 0x932 <__mulsf3+0x1c>
 924:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
 928:	20 f0       	brcs	.+8      	; 0x932 <__mulsf3+0x1c>
 92a:	95 23       	and	r25, r21
 92c:	11 f0       	breq	.+4      	; 0x932 <__mulsf3+0x1c>
 92e:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 932:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>
 936:	11 24       	eor	r1, r1
 938:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>

0000093c <__mulsf3x>:
 93c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
 940:	70 f3       	brcs	.-36     	; 0x91e <__mulsf3+0x8>

00000942 <__mulsf3_pse>:
 942:	95 9f       	mul	r25, r21
 944:	c1 f3       	breq	.-16     	; 0x936 <__mulsf3+0x20>
 946:	95 0f       	add	r25, r21
 948:	50 e0       	ldi	r21, 0x00	; 0
 94a:	55 1f       	adc	r21, r21
 94c:	62 9f       	mul	r22, r18
 94e:	f0 01       	movw	r30, r0
 950:	72 9f       	mul	r23, r18
 952:	bb 27       	eor	r27, r27
 954:	f0 0d       	add	r31, r0
 956:	b1 1d       	adc	r27, r1
 958:	63 9f       	mul	r22, r19
 95a:	aa 27       	eor	r26, r26
 95c:	f0 0d       	add	r31, r0
 95e:	b1 1d       	adc	r27, r1
 960:	aa 1f       	adc	r26, r26
 962:	64 9f       	mul	r22, r20
 964:	66 27       	eor	r22, r22
 966:	b0 0d       	add	r27, r0
 968:	a1 1d       	adc	r26, r1
 96a:	66 1f       	adc	r22, r22
 96c:	82 9f       	mul	r24, r18
 96e:	22 27       	eor	r18, r18
 970:	b0 0d       	add	r27, r0
 972:	a1 1d       	adc	r26, r1
 974:	62 1f       	adc	r22, r18
 976:	73 9f       	mul	r23, r19
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	62 1f       	adc	r22, r18
 97e:	83 9f       	mul	r24, r19
 980:	a0 0d       	add	r26, r0
 982:	61 1d       	adc	r22, r1
 984:	22 1f       	adc	r18, r18
 986:	74 9f       	mul	r23, r20
 988:	33 27       	eor	r19, r19
 98a:	a0 0d       	add	r26, r0
 98c:	61 1d       	adc	r22, r1
 98e:	23 1f       	adc	r18, r19
 990:	84 9f       	mul	r24, r20
 992:	60 0d       	add	r22, r0
 994:	21 1d       	adc	r18, r1
 996:	82 2f       	mov	r24, r18
 998:	76 2f       	mov	r23, r22
 99a:	6a 2f       	mov	r22, r26
 99c:	11 24       	eor	r1, r1
 99e:	9f 57       	subi	r25, 0x7F	; 127
 9a0:	50 40       	sbci	r21, 0x00	; 0
 9a2:	9a f0       	brmi	.+38     	; 0x9ca <__mulsf3_pse+0x88>
 9a4:	f1 f0       	breq	.+60     	; 0x9e2 <__mulsf3_pse+0xa0>
 9a6:	88 23       	and	r24, r24
 9a8:	4a f0       	brmi	.+18     	; 0x9bc <__mulsf3_pse+0x7a>
 9aa:	ee 0f       	add	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	bb 1f       	adc	r27, r27
 9b0:	66 1f       	adc	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	91 50       	subi	r25, 0x01	; 1
 9b8:	50 40       	sbci	r21, 0x00	; 0
 9ba:	a9 f7       	brne	.-22     	; 0x9a6 <__mulsf3_pse+0x64>
 9bc:	9e 3f       	cpi	r25, 0xFE	; 254
 9be:	51 05       	cpc	r21, r1
 9c0:	80 f0       	brcs	.+32     	; 0x9e2 <__mulsf3_pse+0xa0>
 9c2:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
 9c6:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
 9ca:	5f 3f       	cpi	r21, 0xFF	; 255
 9cc:	e4 f3       	brlt	.-8      	; 0x9c6 <__mulsf3_pse+0x84>
 9ce:	98 3e       	cpi	r25, 0xE8	; 232
 9d0:	d4 f3       	brlt	.-12     	; 0x9c6 <__mulsf3_pse+0x84>
 9d2:	86 95       	lsr	r24
 9d4:	77 95       	ror	r23
 9d6:	67 95       	ror	r22
 9d8:	b7 95       	ror	r27
 9da:	f7 95       	ror	r31
 9dc:	e7 95       	ror	r30
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	c1 f7       	brne	.-16     	; 0x9d2 <__mulsf3_pse+0x90>
 9e2:	fe 2b       	or	r31, r30
 9e4:	88 0f       	add	r24, r24
 9e6:	91 1d       	adc	r25, r1
 9e8:	96 95       	lsr	r25
 9ea:	87 95       	ror	r24
 9ec:	97 f9       	bld	r25, 7
 9ee:	08 95       	ret

000009f0 <eeprom_read_byte>:
 9f0:	f9 99       	sbic	0x1f, 1	; 31
 9f2:	fe cf       	rjmp	.-4      	; 0x9f0 <eeprom_read_byte>
 9f4:	92 bd       	out	0x22, r25	; 34
 9f6:	81 bd       	out	0x21, r24	; 33
 9f8:	f8 9a       	sbi	0x1f, 0	; 31
 9fa:	99 27       	eor	r25, r25
 9fc:	80 b5       	in	r24, 0x20	; 32
 9fe:	08 95       	ret

00000a00 <eeprom_write_byte>:
 a00:	26 2f       	mov	r18, r22

00000a02 <eeprom_write_r18>:
 a02:	f9 99       	sbic	0x1f, 1	; 31
 a04:	fe cf       	rjmp	.-4      	; 0xa02 <eeprom_write_r18>
 a06:	1f ba       	out	0x1f, r1	; 31
 a08:	92 bd       	out	0x22, r25	; 34
 a0a:	81 bd       	out	0x21, r24	; 33
 a0c:	20 bd       	out	0x20, r18	; 32
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	f8 94       	cli
 a12:	fa 9a       	sbi	0x1f, 2	; 31
 a14:	f9 9a       	sbi	0x1f, 1	; 31
 a16:	0f be       	out	0x3f, r0	; 63
 a18:	01 96       	adiw	r24, 0x01	; 1
 a1a:	08 95       	ret

00000a1c <_exit>:
 a1c:	f8 94       	cli

00000a1e <__stop_program>:
 a1e:	ff cf       	rjmp	.-2      	; 0xa1e <__stop_program>
