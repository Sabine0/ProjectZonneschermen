
ArduinoLicht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000055e  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000055e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800104  00800104  000005f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000668  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000124f  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000950  00000000  00000000  000019f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a91  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000603  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00003617  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003a55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  9e:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <SCH_tasks_G>
  b4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e7 e0       	ldi	r30, 0x07	; 7
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e9 5f       	subi	r30, 0xF9	; 249
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e9 5f       	subi	r30, 0xF9	; 249
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c7 e0       	ldi	r28, 0x07	; 7
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	1a 30       	cpi	r17, 0x0A	; 10
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	ca 30       	cpi	r28, 0x0A	; 10
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e7 e0       	ldi	r30, 0x07	; 7
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	2d e4       	ldi	r18, 0x4D	; 77
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <setup>:
		if(data == 0xc0){
			transmit(lichtintensiteit);
			transmit(max_licht);
		}
	}
}
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	8a b9       	out	0x0a, r24	; 10
 21c:	84 b9       	out	0x04, r24	; 4
 21e:	08 95       	ret

00000220 <uart_init>:
 220:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 224:	83 e3       	ldi	r24, 0x33	; 51
 226:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 22a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 22e:	88 e1       	ldi	r24, 0x18	; 24
 230:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 234:	86 e0       	ldi	r24, 0x06	; 6
 236:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 23a:	08 95       	ret

0000023c <adc_init>:
 23c:	ea e7       	ldi	r30, 0x7A	; 122
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	87 60       	ori	r24, 0x07	; 7
 244:	80 83       	st	Z, r24
 246:	ac e7       	ldi	r26, 0x7C	; 124
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	8c 91       	ld	r24, X
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	8c 93       	st	X, r24
 250:	80 81       	ld	r24, Z
 252:	80 68       	ori	r24, 0x80	; 128
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <readAdc>:
 258:	ec e7       	ldi	r30, 0x7C	; 124
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	90 ef       	ldi	r25, 0xF0	; 240
 25e:	90 83       	st	Z, r25
 260:	90 81       	ld	r25, Z
 262:	89 2b       	or	r24, r25
 264:	80 83       	st	Z, r24
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	80 64       	ori	r24, 0x40	; 64
 26e:	80 83       	st	Z, r24
 270:	80 81       	ld	r24, Z
 272:	86 fd       	sbrc	r24, 6
 274:	fd cf       	rjmp	.-6      	; 0x270 <readAdc+0x18>
 276:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret

0000027e <tempsensor>:
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 2c 01 	call	0x258	; 0x258 <readAdc>
 286:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lichtintensiteit>
 28a:	8f e3       	ldi	r24, 0x3F	; 63
 28c:	9c e9       	ldi	r25, 0x9C	; 156
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <tempsensor+0x10>
 292:	00 c0       	rjmp	.+0      	; 0x294 <tempsensor+0x16>
 294:	00 00       	nop
 296:	08 95       	ret

00000298 <set_eeprom_address>:
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2a2:	60 91 03 01 	lds	r22, 0x0103	; 0x800103 <status>
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2ae:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <min_uitrol>
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2ba:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <max_uitrol>
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2c6:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <uitrol>
 2ca:	84 e0       	ldi	r24, 0x04	; 4
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2d2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 2d6:	85 e0       	ldi	r24, 0x05	; 5
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2de:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <lichtintensiteit>
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 2ea:	08 95       	ret

000002ec <get_eeprom>:
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 2f4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
 2f8:	82 e0       	ldi	r24, 0x02	; 2
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 300:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <min_uitrol>
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 30c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <max_uitrol>
 310:	84 e0       	ldi	r24, 0x04	; 4
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 318:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uitrol>
 31c:	85 e0       	ldi	r24, 0x05	; 5
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 324:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 330:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lichtintensiteit>
 334:	08 95       	ret

00000336 <RoodLEDaan>:
 336:	5b 9a       	sbi	0x0b, 3	; 11
 338:	08 95       	ret

0000033a <RoodLEDuit>:
 33a:	5b 98       	cbi	0x0b, 3	; 11
 33c:	08 95       	ret

0000033e <GroenLEDaan>:
 33e:	5a 9a       	sbi	0x0b, 2	; 11
 340:	08 95       	ret

00000342 <GroenLEDuit>:
 342:	5a 98       	cbi	0x0b, 2	; 11
 344:	08 95       	ret

00000346 <GeelLEDaan>:
 346:	5c 9a       	sbi	0x0b, 4	; 11
 348:	08 95       	ret

0000034a <GeelLEDuit>:
 34a:	5c 98       	cbi	0x0b, 4	; 11
 34c:	08 95       	ret

0000034e <schermoprollen>:
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 354:	8b b1       	in	r24, 0x0b	; 11
 356:	84 30       	cpi	r24, 0x04	; 4
 358:	11 f4       	brne	.+4      	; 0x35e <schermoprollen+0x10>
 35a:	0e 94 a1 01 	call	0x342	; 0x342 <GroenLEDuit>
 35e:	0e 94 9b 01 	call	0x336	; 0x336 <RoodLEDaan>
 362:	3c c0       	rjmp	.+120    	; 0x3dc <schermoprollen+0x8e>
 364:	0e 94 a3 01 	call	0x346	; 0x346 <GeelLEDaan>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	89 e6       	ldi	r24, 0x69	; 105
 36c:	98 e1       	ldi	r25, 0x18	; 24
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <schermoprollen+0x20>
 376:	00 c0       	rjmp	.+0      	; 0x378 <schermoprollen+0x2a>
 378:	00 00       	nop
 37a:	0e 94 a5 01 	call	0x34a	; 0x34a <GeelLEDuit>
 37e:	2f ef       	ldi	r18, 0xFF	; 255
 380:	89 e6       	ldi	r24, 0x69	; 105
 382:	98 e1       	ldi	r25, 0x18	; 24
 384:	21 50       	subi	r18, 0x01	; 1
 386:	80 40       	sbci	r24, 0x00	; 0
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	e1 f7       	brne	.-8      	; 0x384 <schermoprollen+0x36>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <schermoprollen+0x40>
 38e:	00 00       	nop
 390:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 394:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <min_uitrol>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0a 97       	sbiw	r24, 0x0a	; 10
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	82 17       	cp	r24, r18
 3a0:	93 07       	cpc	r25, r19
 3a2:	8c f4       	brge	.+34     	; 0x3c6 <schermoprollen+0x78>
 3a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uitrol>
 3a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <min_uitrol>
 3ac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 3b0:	92 1b       	sub	r25, r18
 3b2:	89 1b       	sub	r24, r25
 3b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uitrol>
 3b8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <uitrol>
 3bc:	84 e0       	ldi	r24, 0x04	; 4
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 3c4:	0b c0       	rjmp	.+22     	; 0x3dc <schermoprollen+0x8e>
 3c6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 3ca:	8a 50       	subi	r24, 0x0A	; 10
 3cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uitrol>
 3d0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <uitrol>
 3d4:	84 e0       	ldi	r24, 0x04	; 4
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 3dc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uitrol>
 3e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <min_uitrol>
 3e4:	89 17       	cp	r24, r25
 3e6:	08 f4       	brcc	.+2      	; 0x3ea <schermoprollen+0x9c>
 3e8:	bd cf       	rjmp	.-134    	; 0x364 <schermoprollen+0x16>
 3ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 3ee:	08 95       	ret

000003f0 <schermuitrollen>:
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 3f6:	8b b1       	in	r24, 0x0b	; 11
 3f8:	88 30       	cpi	r24, 0x08	; 8
 3fa:	11 f4       	brne	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fc:	0e 94 9d 01 	call	0x33a	; 0x33a <RoodLEDuit>
 400:	0e 94 9f 01 	call	0x33e	; 0x33e <GroenLEDaan>
 404:	3c c0       	rjmp	.+120    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 406:	0e 94 a3 01 	call	0x346	; 0x346 <GeelLEDaan>
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	89 e6       	ldi	r24, 0x69	; 105
 40e:	98 e1       	ldi	r25, 0x18	; 24
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
 41c:	0e 94 a5 01 	call	0x34a	; 0x34a <GeelLEDuit>
 420:	2f ef       	ldi	r18, 0xFF	; 255
 422:	89 e6       	ldi	r24, 0x69	; 105
 424:	98 e1       	ldi	r25, 0x18	; 24
 426:	21 50       	subi	r18, 0x01	; 1
 428:	80 40       	sbci	r24, 0x00	; 0
 42a:	90 40       	sbci	r25, 0x00	; 0
 42c:	e1 f7       	brne	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
 432:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 436:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <max_uitrol>
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0a 96       	adiw	r24, 0x0a	; 10
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	28 17       	cp	r18, r24
 442:	39 07       	cpc	r19, r25
 444:	8c f4       	brge	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <max_uitrol>
 44a:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uitrol>
 44e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 452:	82 0f       	add	r24, r18
 454:	89 1b       	sub	r24, r25
 456:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uitrol>
 45a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <uitrol>
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 466:	0b c0       	rjmp	.+22     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 468:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uitrol>
 46c:	86 5f       	subi	r24, 0xF6	; 246
 46e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uitrol>
 472:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <uitrol>
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 9f 02 	call	0x53e	; 0x53e <eeprom_write_byte>
 47e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uitrol>
 482:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <max_uitrol>
 486:	98 17       	cp	r25, r24
 488:	08 f4       	brcc	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 48a:	bd cf       	rjmp	.-134    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 48c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 490:	08 95       	ret

00000492 <rol>:
 492:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <status>
 496:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	91 30       	cpi	r25, 0x01	; 1
 49e:	09 f0       	breq	.+2      	; 0x4a2 <rol+0x10>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	88 23       	and	r24, r24
 4a4:	81 f0       	breq	.+32     	; 0x4c6 <rol+0x34>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	21 11       	cpse	r18, r1
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	88 23       	and	r24, r24
 4ae:	59 f0       	breq	.+22     	; 0x4c6 <rol+0x34>
 4b0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lichtintensiteit>
 4b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 4b8:	89 17       	cp	r24, r25
 4ba:	18 f4       	brcc	.+6      	; 0x4c2 <rol+0x30>
 4bc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <schermuitrollen>
 4c0:	08 95       	ret
 4c2:	0e 94 a7 01 	call	0x34e	; 0x34e <schermoprollen>
 4c6:	08 95       	ret

000004c8 <main>:

int main(void){
	if(eeprom_read_byte(0x00) != 0x01){ // check of er nog geen data is
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 97 02 	call	0x52e	; 0x52e <eeprom_read_byte>
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	19 f0       	breq	.+6      	; 0x4da <main+0x12>
		set_eeprom_address(); //vul EEPROM met de volatile variabelen
 4d4:	0e 94 4c 01 	call	0x298	; 0x298 <set_eeprom_address>
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <main+0x16>
	}
	else{
		get_eeprom(); //als er al wel waarden waren, haal ze op en zet ze in de volatile variabelen
 4da:	0e 94 76 01 	call	0x2ec	; 0x2ec <get_eeprom>
	}
	
	// Set up de ports
	setup();
 4de:	0e 94 0c 01 	call	0x218	; 0x218 <setup>
	
	// Initialise communicatie en ADC
	uart_init();
 4e2:	0e 94 10 01 	call	0x220	; 0x220 <uart_init>
	adc_init();
 4e6:	0e 94 1e 01 	call	0x23c	; 0x23c <adc_init>
	
	//tests
	//if lichtintensiteit>max_licht: schermuitrollen
	//schermuitrollen == Green
	//schermoprollen == Red
	isRolling=0;
 4ea:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	status=1;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status>
	max_licht = 100;
 4f4:	84 e6       	ldi	r24, 0x64	; 100
 4f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	lichtintensiteit = 200;
 4fa:	88 ec       	ldi	r24, 0xC8	; 200
 4fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <lichtintensiteit>
	
	SCH_Init_T1(); // Initialise de timer, default 10ms
 500:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	
	// Voeg tasks toe aan de scheduler
	//SCH_Add_Task(run, 0, 1);
	SCH_Add_Task(tempsensor,1000, 1000); 
 504:	48 ee       	ldi	r20, 0xE8	; 232
 506:	53 e0       	ldi	r21, 0x03	; 3
 508:	68 ee       	ldi	r22, 0xE8	; 232
 50a:	73 e0       	ldi	r23, 0x03	; 3
 50c:	8f e3       	ldi	r24, 0x3F	; 63
 50e:	91 e0       	ldi	r25, 0x01	; 1
 510:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(getDistance,1200,1000); // Ultrasoon sensor niet geimplementeerd
	SCH_Add_Task(rol,500,3000); // tijd verkort voor testing purposes
 514:	48 eb       	ldi	r20, 0xB8	; 184
 516:	5b e0       	ldi	r21, 0x0B	; 11
 518:	64 ef       	ldi	r22, 0xF4	; 244
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	89 e4       	ldi	r24, 0x49	; 73
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	SCH_Start(); // De scheduler starten
 524:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	
	while(1){
		SCH_Dispatch_Tasks();
 528:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 52c:	fd cf       	rjmp	.-6      	; 0x528 <main+0x60>

0000052e <eeprom_read_byte>:
 52e:	f9 99       	sbic	0x1f, 1	; 31
 530:	fe cf       	rjmp	.-4      	; 0x52e <eeprom_read_byte>
 532:	92 bd       	out	0x22, r25	; 34
 534:	81 bd       	out	0x21, r24	; 33
 536:	f8 9a       	sbi	0x1f, 0	; 31
 538:	99 27       	eor	r25, r25
 53a:	80 b5       	in	r24, 0x20	; 32
 53c:	08 95       	ret

0000053e <eeprom_write_byte>:
 53e:	26 2f       	mov	r18, r22

00000540 <eeprom_write_r18>:
 540:	f9 99       	sbic	0x1f, 1	; 31
 542:	fe cf       	rjmp	.-4      	; 0x540 <eeprom_write_r18>
 544:	1f ba       	out	0x1f, r1	; 31
 546:	92 bd       	out	0x22, r25	; 34
 548:	81 bd       	out	0x21, r24	; 33
 54a:	20 bd       	out	0x20, r18	; 32
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	fa 9a       	sbi	0x1f, 2	; 31
 552:	f9 9a       	sbi	0x1f, 1	; 31
 554:	0f be       	out	0x3f, r0	; 63
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>
